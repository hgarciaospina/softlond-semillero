package com.clinica.nomina;

import com.clinica.nomina.model.*;
import com.clinica.nomina.reportes.*;
import com.clinica.nomina.repository.DatosRepository;
import com.clinica.nomina.service.*;

import java.util.List;
import java.util.Scanner;

/**
 * Clase principal ‚Äî Punto de entrada de la aplicaci√≥n.
 *
 * Ahora con men√∫ interactivo para ejecutar cada reporte individualmente
 * y pausa despu√©s de cada opci√≥n.
 */
public class NominaClinicaStreamsApplication {

    public static void main(String[] args) {

        // üîπ Inicializaci√≥n de datos base
        DatosRepository datosRepository = new DatosRepository();
        LiquidacionService liquidacionService = new LiquidacionService(datosRepository);
        List<ConsolidadoNovedadesNomina> consolidado = liquidacionService.calcularLiquidacionPorEmpleado();
        List<Empleado> listaEmpleados = datosRepository.obtenerEmpleados();
        List<RegistroTurno> registrosMes = datosRepository.obtenerRegistrosMes();

        // üîπ Inicializaci√≥n de servicios y reportes
        EmpleadoDelMesService empleadoDelMesService = new EmpleadoDelMesService(datosRepository);
        DesgloseHorasPorAreaYTurnoService desgloseService = new DesgloseHorasPorAreaYTurnoService(liquidacionService);
        ProductividadService productividadService = new ProductividadService(datosRepository);
        AuditoriaCoberturaService auditoriaService = new AuditoriaCoberturaService(liquidacionService.obtenerNovedadesNomina());
        BonusDisponibilidadService bonusService = new BonusDisponibilidadService(consolidado);
        TurnosConsecutivosAnormalesService turnosService = new TurnosConsecutivosAnormalesService(liquidacionService);
        InconsistenciasDatosService inconsistenciasService = new InconsistenciasDatosService(listaEmpleados, registrosMes);

        ReporteLiquidacion reporteLiquidacion = new ReporteLiquidacion(liquidacionService);
        ReporteEmpleadoDelMes reporteEmpleadoDelMes = new ReporteEmpleadoDelMes(empleadoDelMesService);
        ReporteDesgloseHorasPorAreaYTurno reporteDesglose = new ReporteDesgloseHorasPorAreaYTurno();
        ReporteProductividadEmpleado reporteProductividad = new ReporteProductividadEmpleado(productividadService);
        ReporteAuditoriaCobertura reporteAuditoria = new ReporteAuditoriaCobertura(auditoriaService);
        ReporteBonusDisponibilidad reporteBonus = new ReporteBonusDisponibilidad(consolidado);
        ReporteEmpleadosConBono reporteConBono = new ReporteEmpleadosConBono(bonusService.calcularBonus());
        ReporteTurnosConsecutivosAnormales reporteTurnosAnormales = new ReporteTurnosConsecutivosAnormales(turnosService);
        ReporteInconsistenciasDatos reporteInconsistencias = new ReporteInconsistenciasDatos(inconsistenciasService);

        // üîπ Men√∫ interactivo
        Scanner scanner = new Scanner(System.in);
        int opcion;

        do {
            System.out.println("\n====================================================");
            System.out.println("üìã MEN√ö DE REPORTES DE N√ìMINA - CL√çNICA STREAMS");
            System.out.println("====================================================");
            System.out.println("1Ô∏è‚É£  Liquidaci√≥n general de n√≥mina");
            System.out.println("2Ô∏è‚É£  Empleado del mes por √°rea");
            System.out.println("3Ô∏è‚É£  Desglose de horas por √°rea y tipo de turno");
            System.out.println("4Ô∏è‚É£  Productividad de empleados");
            System.out.println("5Ô∏è‚É£  Auditor√≠a de cobertura m√≠nima (guardia)");
            System.out.println("6Ô∏è‚É£  Bonus por disponibilidad");
            System.out.println("7Ô∏è‚É£  Turnos consecutivos anormales");
            System.out.println("8Ô∏è‚É£  Chequeo de inconsistencias de datos");
            System.out.println("9Ô∏è‚É£  Costo operativo por √°rea");
            System.out.println("0Ô∏è‚É£  Salir");
            System.out.print("Seleccione una opci√≥n: ");

            // Leer opci√≥n y limpiar buffer
            opcion = scanner.nextInt();
            scanner.nextLine(); // Limpiar el salto de l√≠nea pendiente

            switch (opcion) {
                case 1 -> {
                    reporteLiquidacion.imprimir();
                    esperarEnter(scanner);
                }
                case 2 -> {
                    reporteEmpleadoDelMes.imprimir();
                    esperarEnter(scanner);
                }
                case 3 -> {
                    reporteDesglose.imprimir(desgloseService.calcularDesgloseHorasPorAreaYTipoTurnoStringDouble());
                    esperarEnter(scanner);
                }
                case 4 -> {
                    reporteProductividad.imprimir();
                    esperarEnter(scanner);
                }
                case 5 -> {
                    reporteAuditoria.imprimir();
                    esperarEnter(scanner);
                }
                case 6 -> {
                    System.out.println("\nüìå LISTA PRINCIPAL DE N√ìMINA:");
                    reporteBonus.imprimir();
                    System.out.println("\nüìå EMPLEADOS CON BONO POR DISPONIBILIDAD:");
                    if (bonusService.calcularBonus().isEmpty()) {
                        System.out.println("üìå No hay empleados que cumplan los criterios para recibir bono de disponibilidad.");
                    } else {
                        reporteConBono.imprimir();
                    }
                    esperarEnter(scanner);
                }
                case 7 -> {
                    System.out.println("\nüìå TURNOS CONSECUTIVOS ANORMALES:");
                    reporteTurnosAnormales.imprimir();
                    esperarEnter(scanner);
                }
                case 8 -> {
                    System.out.println("\nüìå CHEQUEO DE INCONSISTENCIAS DE DATOS:");
                    reporteInconsistencias.imprimir();
                    esperarEnter(scanner);
                }
                case 9 -> {
                    System.out.println("\nüìå COSTO OPERATIVO POR √ÅREA:");
                    //reporteCosto.imprimir();
                    esperarEnter(scanner);
                }
                case 0 -> System.out.println("üîπ Saliendo del sistema. ¬°Hasta luego!");
                default -> System.out.println("‚ùå Opci√≥n inv√°lida, intente de nuevo.");
            }

        } while (opcion != 0);

        scanner.close();
    }

    private static void esperarEnter(Scanner scanner) {
        System.out.println("\nOprima <enter> para continuar...");
        scanner.nextLine();
    }
}
